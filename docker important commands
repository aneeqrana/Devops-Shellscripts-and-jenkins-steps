Docker Commands:

    docker version: Shows the current Docker version installed on the system.
    docker info: Displays information about the current Docker installation and configuration.
    docker run: Runs a Docker container.
    docker ps: Lists the currently running Docker containers.
    docker images: Lists the Docker images available on the system.
    docker pull: Downloads a Docker image from a Docker registry.
    docker push: Uploads a Docker image to a Docker registry.
    docker build: Builds a Docker image from a Dockerfile.
    docker tag: Tags a Docker image with a name that can be used for uploading to a Docker registry.
    docker commit: Creates a new Docker image from a running container.
    docker start: Starts a stopped Docker container.
    docker stop: Stops a running Docker container.
    docker restart: Restarts a running Docker container.
    docker rm: Removes a stopped Docker container.
    docker rmi: Removes a Docker image.
    docker logs: Displays the logs of a running Docker container.
    docker inspect: Returns low-level information on a Docker object (container, image, network, etc.)
    docker network: Manages Docker networks.
    docker volume: Manages Docker volumes.
    docker-compose: Manages multi-container Docker applications.

JavaScript app on Docker requirements:

    MongoDB
    JS
    Commit in GIT
    Jenkins to build artifacts

To deploy the JavaScript app on Docker, the first thing to do is pull the MongoDB and MongoDB Express images:

docker pull mongo
docker pull mongo-express

Docker network is an isolated network where the containers are deployed on the same network, so they can talk to each other without using ports.
Docker network commands:

    docker network ls: Lists the networks created in Docker.
    docker network create: Creates a Docker network.
    
    

To create a Docker network for MongoDB, use the following command:

docker network create mongo-network

Useful Docker commands:

    docker images: Lists Docker images.
    docker image rm --force: Removes a Docker image.
    docker image prune -a --force --filter "until=240h": Removes unused Docker images.
    docker inspect: Returns low-level information on a Docker object (container, image, network, etc.)
    docker stop $(docker ps -q): Stops all running Docker containers.
    docker rm $(docker ps -a -q): Removes any unused Docker containers.
    docker rmi $(docker images -q): Removes any unused Docker images.
    docker system prune: Removes any unused data, such as containers, networks, and volumes.
    sudo du -sh /var/lib/docker/overlay2/*: Lists large files in the /var/lib/docker/overlay2 directory.

To get the IP address of a Docker container, use the following command:



docker inspect <container_id> | grep IPAddress

To start an image or container, use the following commands:



docker start <container_name>
docker attach <container_name>
docker exec -it <container_id> /bin/sh

To setup MongoDB, run the following command:



docker run -p 27017:27017 -d -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=password --name mongodb --net mongo-network mongo

To setup MongoDB Express, run the following command:



docker run -d -p 8081:8081 -e ME_CONFIG_MONGODB_AUTH_USERNAME=admin -e ME_CONFIG_MONGODB_AUTH_PASSWORD=password --net mongo

